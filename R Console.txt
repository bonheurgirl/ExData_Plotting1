
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.66 (6996) x86_64-apple-darwin13.4.0]

[Workspace restored from /Users/anitaowens/.RData]
[History restored from /Users/anitaowens/.Rapp.history]

> setwd("/Users/anitaowens/Documents/ExData_Plotting1")
> getwd()
[1] "/Users/anitaowens/Documents/ExData_Plotting1"
> library(zoo)

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(xts)
> install.packages(xts)
Error in as.character(x) : 
  cannot coerce type 'closure' to vector of type 'character'
> 
> install.packages(zoo)
Error in as.character(x) : 
  cannot coerce type 'closure' to vector of type 'character'
> install.packages("zoo")
--- Please select a CRAN mirror for use in this session ---
trying URL 'https://cran.uni-muenster.de/bin/macosx/mavericks/contrib/3.2/zoo_1.7-12.tgz'
Content type 'application/x-gzip' length 885377 bytes (864 KB)
==================================================
downloaded 864 KB


The downloaded binary packages are in
	/var/folders/x0/d4958p9j30ndvrzls4lbn0qr0000gn/T//RtmpQtTImu/downloaded_packages
> library(zoo)
> hpc <- read.table("household_power_consumption.txt", sep=";",na.strings="?", header=T)
> hpc$Date<-as.Date(hpc$Date, format="%d/%m/%Y")
> hpc$Time<--sub(".* ", "", hpc$Time)
Error in -sub(".* ", "", hpc$Time) : invalid argument to unary operator
> str(hpc)
'data.frame':	2075259 obs. of  9 variables:
 $ Date                 : Date, format: "2006-12-16" "2006-12-16" "2006-12-16" "2006-12-16" ...
 $ Time                 : Factor w/ 1440 levels "00:00:00","00:01:00",..: 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 ...
 $ Global_active_power  : num  4.22 5.36 5.37 5.39 3.67 ...
 $ Global_reactive_power: num  0.418 0.436 0.498 0.502 0.528 0.522 0.52 0.52 0.51 0.51 ...
 $ Voltage              : num  235 234 233 234 236 ...
 $ Global_intensity     : num  18.4 23 23 23 15.8 15 15.8 15.8 15.8 15.8 ...
 $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
 $ Sub_metering_2       : num  1 1 2 1 1 2 1 1 1 2 ...
 $ Sub_metering_3       : num  17 16 17 17 17 17 17 17 17 16 ...
> #subsetting dates needed
> epc_data<-hpc[ which(hpc$Date>="2007-02-01" & hpc$Date<="2007-02-02"),]
> epc_data$Time<-strptime(epc_data$Time, format="%H:%M:%S")
> hist(epc_data$Global_active_power,breaks=11, main="Global Active Power", col="red",  xlab="Global Active Power (kilowatts)")
> plot(epc_data$Date, epc_data$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = " ")
> axis.POSIXct(side=1, at=cut(epc_data$Date, "days"), format="%d")
> epc_data$Time<-strptime(epc_data$Time, format="%H:%M:%S")
> plot(epc_data$Time, epc_data$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = " ", mar = c(0,0,0,0))
Error in plot.window(...) : need finite 'xlim' values
In addition: Warning messages:
1: In min(x) : no non-missing arguments to min; returning Inf
2: In max(x) : no non-missing arguments to max; returning -Inf
> plot(epc_data$Date, epc_data$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = " ", mar = c(2,2,2,2))
> plot(epc_data$Date, epc_data$Global_active_power, type = "l", ylab = "Global Active Power (kilowatts)", xlab = " ", mar = c(4,2,2,2))
> str(hpc)
'data.frame':	2075259 obs. of  9 variables:
 $ Date                 : Date, format: "2006-12-16" "2006-12-16" "2006-12-16" "2006-12-16" ...
 $ Time                 : Factor w/ 1440 levels "00:00:00","00:01:00",..: 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 ...
 $ Global_active_power  : num  4.22 5.36 5.37 5.39 3.67 ...
 $ Global_reactive_power: num  0.418 0.436 0.498 0.502 0.528 0.522 0.52 0.52 0.51 0.51 ...
 $ Voltage              : num  235 234 233 234 236 ...
 $ Global_intensity     : num  18.4 23 23 23 15.8 15 15.8 15.8 15.8 15.8 ...
 $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
 $ Sub_metering_2       : num  1 1 2 1 1 2 1 1 1 2 ...
 $ Sub_metering_3       : num  17 16 17 17 17 17 17 17 17 16 ...
> epc_data$Time<-strptime(epc_data$Time, format="%H:%M:%S")
> str(epc)
Error in str(epc) : object 'epc' not found
> epc_data<-hpc[ which(hpc$Date>="2007-02-01" & hpc$Date<="2007-02-02"),]
> epc_data$Time<-strptime(epc_data$Time, format="%H:%M:%S")
> str(epc)
Error in str(epc) : object 'epc' not found
> 
> str(epc_data)
'data.frame':	2880 obs. of  9 variables:
 $ Date                 : Date, format: "2007-02-01" "2007-02-01" "2007-02-01" "2007-02-01" ...
 $ Time                 : POSIXlt, format: "2016-01-09 00:00:00" "2016-01-09 00:01:00" "2016-01-09 00:02:00" "2016-01-09 00:03:00" ...
 $ Global_active_power  : num  0.326 0.326 0.324 0.324 0.322 0.32 0.32 0.32 0.32 0.236 ...
 $ Global_reactive_power: num  0.128 0.13 0.132 0.134 0.13 0.126 0.126 0.126 0.128 0 ...
 $ Voltage              : num  243 243 244 244 243 ...
 $ Global_intensity     : num  1.4 1.4 1.4 1.4 1.4 1.4 1.4 1.4 1.4 1 ...
 $ Sub_metering_1       : num  0 0 0 0 0 0 0 0 0 0 ...
 $ Sub_metering_2       : num  0 0 0 0 0 0 0 0 0 0 ...
 $ Sub_metering_3       : num  0 0 0 0 0 0 0 0 0 0 ...
> hist(epc_data$Global_active_power,breaks=11, main="Global Active Power", col="red",  xlab="Global Active Power (kilowatts)")
2016-01-09 21:26:25.013 R[16207:1033938] Communications error: <OS_xpc_error: <error: 0x7fff78dc2b90> { count = 1, contents =
	"XPCErrorDescription" => <string: 0x7fff78dc2f40> { length = 22, contents = "Connection interrupted" }
}>
> dev.cur()
null device 
          1 
> hist(epc_data$Global_active_power,breaks=11, main="Global Active Power", col="red",  xlab="Global Active Power (kilowatts)")
> library(datasets)
> dev.copy(png, file="plot1.png")
quartz_off_screen 
                3 
> dev.off()
quartz 
     2 
> dev.copy(png, file="plot1.png",width=480,height=480)
quartz_off_screen 
                3 
> dev.off()
quartz 
     2 
> str()